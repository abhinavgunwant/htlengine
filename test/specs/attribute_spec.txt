#
### add single attribute
#
<div data-sly-attribute.data-values="${properties.myValues}"></div>
---
out("<div");
{ const var_attrValue_data-values0 = properties["myValues"];
  { const var_attrValueEscaped_data-values1 = xss(var_attrValue_data-values0, context="attribute", hint="data-values");
    if (var_attrValueEscaped_data-values1||"false"==var_attrValue_data-values0) {
      out(" data-values");
      if (var_attrValue_data-values0) {
        out("=\"");
        out(var_attrValueEscaped_data-values1);
        out("\"");
      }
    }
  }
}
out("></div>\n");
===
<div data-values="some data value"></div>
#
### replace single attribute
#
<div title="" class="className" data-sly-attribute.class="${properties.myClass}"/>
===
<div title="" class="super-green"/>
#
### replace single attribute after call must not work.
#
<div data-sly-attribute.class="${properties.myClass}" class="className"/>
===
<div class="className"/>
#
### remove single attribute
#
<div title="" class="className" data-sly-attribute.class="${false}"/>
===
<div title=""/>
#
### ignore dangerous attributes
#
<div title="" onMouseMove="javascript:alert()" data-sly-attribute.onMouseMove="${'system.exit()'}"/>
===
<div title="" onMouseMove="javascript:alert()"/>
#
### create / replace / delete multiple arguments
#
<input class="green" lang="en" data-sly-attribute="${foobar}" type="text" />
---
out("<input");
{ const var_attrMap0 = foobar;
  { const var_attrName_class1 = "class";
    { const var_mapContains_class2 = var_attrMap0["class"];
      { const var_attrContentEscaped3 = xss(var_mapContains_class2, context="attribute", hint=var_attrName_class1);
        if (var_attrContentEscaped3||"false"==var_mapContains_class2) {
          out(" ");
          out(var_attrName_class1);
          if (var_mapContains_class2) {
            out("=\"");
            out(var_attrContentEscaped3);
            out("\"");
          }
        }
      }
      if (var_mapContains_class2==null) {
        out(" class=\"green\"");
      }
    }
  }
  { const var_attrName_lang4 = "lang";
    { const var_mapContains_lang5 = var_attrMap0["lang"];
      { const var_attrContentEscaped6 = xss(var_mapContains_lang5, context="attribute", hint=var_attrName_lang4);
        if (var_attrContentEscaped6||"false"==var_mapContains_lang5) {
          out(" ");
          out(var_attrName_lang4);
          if (var_mapContains_lang5) {
            out("=\"");
            out(var_attrContentEscaped6);
            out("\"");
          }
        }
      }
      if (var_mapContains_lang5==null) {
        out(" lang=\"en\"");
      }
    }
  }
  out(" type=\"text\"");
  { const var_ignoredAttributes7 = {"class":{"_hasParens":false,"_value":true,"_text":true},"lang":{"_hasParens":false,"_value":true,"_text":true},"type":{"_hasParens":false,"_value":true,"_text":true}};
    for ((var_attrIndex10,var_attrName8) in var_attrMap0) {
      { const var_attrNameEscaped9 = xss(var_attrName8, context="attributeName");
        if (var_attrNameEscaped9) {
          if (!var_ignoredAttributes7[var_attrName8]) {
            { const var_attrContent11 = var_attrMap0[var_attrName8];
              { const var_attrContentEscaped12 = xss(var_attrContent11, context="attribute", hint=var_attrNameEscaped9);
                if (var_attrContentEscaped12||"false"==var_attrContent11) {
                  out(" ");
                  out(var_attrNameEscaped9);
                  if (var_attrContent11) {
                    out("=\"");
                    out(var_attrContentEscaped12);
                    out("\"");
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}
out("/>\n");
===
<input class="bar" type="text" id="foo"/>
#
###
#
