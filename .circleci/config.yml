version: 2
jobs:

  htlengine:
    parallelism: 4
    docker:
      # specify the version you desire here
      # using the clojurescript image because it has node, java, antlr and the openwhisk tools
      - image: circleci/node:8

    working_directory: ~/repo

    steps:
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
            - v3-dependencies-{{ checksum "package.json" }}

      - run: 
          name: Install Dependencies
          command: npm install

      - save_cache:
          paths:
            - node_modules
          key: v3-dependencies-{{ checksum "package.json" }}

      # run tests!
      - run: mkdir -p junit
      - run:
          name: Running Tests
          command: circleci tests glob test/*.js | circleci tests split | xargs echo npx mocha
          environment:
            MOCHA_FILE: junit/test-results.xml
          when: always

      - store_test_results:
          path: junit
      - store_artifacts:
          path: junit 

  publish-snapshot:
    docker:
      # specify the version you desire here
      # using the clojurescript image because it has node, java, antlr and the openwhisk tools
      - image: trieloff/githop:clojurescript

    working_directory: ~/repo

    steps:
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
            - v2-dependencies-{{ checksum "package.json" }}
            # fallback to using the latest cache if no exact match is found
            - v2-dependencies-

      - run: 
          name: Install Dependencies
          command: npm install && npm install mocha-junit-reporter npm-snapshot

      - save_cache:
          paths:
            - node_modules
          key: v2-dependencies-{{ checksum "package.json" }}

      # run tests!
      - run: mkdir junit
      - run:
          name: Running Tests
          command: ./node_modules/.bin/mocha test --reporter mocha-junit-reporter
          environment:
            MOCHA_FILE: junit/test-results.xml
          when: always

      - run: echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" >> ~/.npmrc

      - run: 
          command: BUILD_TAG=$(./node_modules/.bin/npm-snapshot $CIRCLE_BUILD_NUM) echo 'export BUILD_TAG=$BUILD_TAG' >> $BASH_ENV

      - run: 
          name: Publish Snapshot
          command: npm publish --access public

      - store_test_results:
          path: junit
      - store_artifacts:
          path: junit 

workflows:
  version: 2
  build:
    jobs:
      - publish-snapshot:
           requires:
               - htlengine
           filters:
              branches:
                only:
                  - master
      - htlengine